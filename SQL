// Table Creating Methodolgies
 Create :  Can Be Used To Create Table,Views,Materlized Views,Index,Synomun,Procedures,Function
 Drop Table Employee;
 Insert Into Employee Values(102,'Jagdish','IT',8888,'Male',30,'Banagalore');
 select * from employee;
 
Create Table Employee ( Id Number , Name Varchar(15),  Department Varchar(10),  Salary Number(8, 2),
Gender Varchar(10), Age Number, City Varchar(10));
desc employee;
drop table employee_dup;
Create Table Employee_Dup As Select * From Employee Where 1=0; // Only Structure Will Be Created
select * from employee_dup;
Create Table Employee_Dup As Select * From Employee;     Structure And Data Will Also Be Copied
Select * From Employee_Dup;



    
*******************************************************************************
// Applying Column Level Constraint
Primary key,Unique,Not null,Check,Foreign Key
   Drop Table Employee ;
  Create Table Employee ( Id Number Primary Key, Name Varchar(15),  Department Varchar(10),  Salary Number(8, 2),
  Gender Varchar(10), Age Number, City Varchar(10));
  desc employee;
  
  1. Select * From User_Constraints where table_name='EMPLOYEE';
  
    
  
  
  // Applying  Table Level Constraint
  Drop Table Employee ;
  Create Table Employee ( Id Number , Name Varchar(15),  Department Varchar(10),  Salary Number(8, 2),
  Gender Varchar(10), Age Number, City Varchar(10),      Primary Key(Id));
  Or
  
  Create Table Employee ( Id Number , Name Varchar(15),  Department Varchar(10),  Salary Number(8, 2),
  Gender Varchar(10), Age Number, City Varchar(10),CONSTRAINT pk_id Primary Key(Id));
  
  
  
  ******************************Using Alter Command***************************************************
   Create Table Employee ( Id Number , Name Varchar(15),  Department Varchar(10),  Salary Number(8, 2),
  Gender Varchar(10), Age Number, City Varchar(10));
  
  Alter Table Employee Add Constraint Pk_Id Primary Key (Id);
  Or
  ALTER TABLE Employee ADD PRIMARY KEY (Id);
  
  ****************************************Dropping Primary Key Using Alter Command*************************
  Alter Table Employee Drop Primary Key;
  Or
  Alter Table Employee Drop Constraint Pk_Id;
  
  
  ******************************Working With Composite Keys*************************************************
  CREATE TABLE Employee (  Id  number, Name VARCHAR2(20),  Email  VARCHAR2(20),   Primary Key(Name, Email) );
  
  Desc Employee;
Insert Into Employee (Id, Name, Email) Values (1, 'Jagdish', 'jagdish@g.com');
Insert Into Employee (Id, Name, Email) Values (2, 'Jagdish', 'jagdish1@g.com');
Insert Into Employee (Id, Name, Email) Values (3, 'Jagdish1', 'jagdish1@g.com'); // this will not get added has the combination of name and email are duplicated
select * from employee;
******************************************Unique Constraint*************************************
   Drop Table Employee ;
Create Table Employee (
  Id  number UNIQUE,
  Name VARCHAR(10),
  Email VARCHAR(20) UNIQUE,
  Department Varchar(10)
);
Insert Into Employee (Id, Name, Email, Department) Values (1, 'Jagdish', 'Jagdish@g.com', 'IT');
INSERT INTO Employee (Id, Name, Email, Department) VALUES (1, 'Jagdish', 'Jagdish@g.com', 'IT'); // constraint violation
*********************************************Not Null***********************************************
Create Table Student (
  StudentId number NOT NULL,
  Name VARCHAR2(20) NOT NULL,
  RegdNo VARCHAR2(10) NOT NULL,
  Branch VARCHAR2(10) NOT NULL,
  Mobile Varchar2(10)
);
    
Insert Into Student Values (1, 'Jagdish', 'J101', 'CSE', '1111111111');
Insert Into Student Values (2, 'Hegade', 'H101', 'CSE', Null);
  Insert Into Student Values (4, Null, 'V101', 'CSE', '2222222222');
  select * from student;
  
  **************************************************Working with Check Constraint*********************************
  
  drop table employees;
  
  Create Table Employees(
   EmployeeID number CHECK(EmployeeID BETWEEN 100 AND 1000),
   Name Varchar(20),
   Age  Number Not Null Check (Age >= 18),
   DeptID number CHECK(DeptID > 0 AND DeptID < 100),
   Salary Number(10)
);
  
  Insert Into Employees Values (100, 'Jagdish', 20, 1, 20000);
  
INSERT INTO Employees values (101, 'Hegade', 25, 2, 25000);
INSERT INTO Employees values (10, 'Vandy', 20, 1, 20000);// here check violation constraint occurs.
or table level check contraint
Create Table Employees( Employeeid Number , Name Varchar(20), Age  Number ,Deptid Number, Salary Number(10),
   CONSTRAINT CONSTRAINT_empID CHECK(Employeeid BETWEEN 100 AND 1000),
   CONSTRAINT CONSTRAINT_AGE CHECK(AGE >= 18),
   Constraint Constraint_Deptid Check(Deptid > 0 And Deptid < 100)
);
*******************************Composite Check Constraint *******************************
drop table employees;
CREATE TABLE Employees( PersonID number, NAME VARCHAR(20), AGE  number, DeptID number, SALARY NUMBER(10),
   Constraint Constraint_Age_Deptid Check(Age >= 18 And Deptid > 0)
);
Insert Into Person Values (1, 'Jagdish', 20, 10, 1000); --Allowed
Insert Into Person Values (2, 'Jagdish', 15, 20, 1000); -- NOT Allowed
Insert Into Person Values (3, 'Jagdish', 22, 0, 1000); --NOT Allowed
INSERT INTO Person VALUES (1, 'Jagdish', 15, 0, 1000); --Not Allowed

******************************Referentail Integrity Constraint *******************************
Drop Table Department;
Drop Table Employee
//PARENT TABLE
CREATE TABLE Department
( 
    Id   number  PRIMARY KEY, 
    Name VARCHAR2(20), 
    Location  Varchar2(20) 
);
//cHILD Table
CREATE TABLE Employee 
( 
    ID  number PRIMARY KEY, 
    Name  Varchar2(20), 
    Salary Number, 
    Departmentid number References Department(Id) 
);
Desc Department;
Desc Employee;
  Select * From User_Constraints Where Table_Name='EMPLOYEE';
  
INSERT INTO Department (Id, Name, Location) VALUES (10, 'IT', 'Hyderabad');
Insert Into Department (Id, Name, Location) Values (20, 'HR', 'Delhi');
INSERT INTO Department (Id, Name, Location) VALUES (30, 'Finance', 'Mumbai');
Select * From Department;
Insert Into Employee Values (101, 'Jagdish', 25000, 10); 
Insert Into Employee Values (102, 'Hegade', 32000, 20); 
INSERT into Employee VALUES (103, 'Vandy', 35000, 30);
select * from employee;
// Lets Try To Add Record Whose Id Doesnt Exist In Department Table
Insert Into Employee Values (104, 'Jagdish', 52000, 40);
Rules To Follow While Working With Foreign Key In Oracle
Rule1:
We Cannot Insert A Value Into The Foreign Key Column If That Value Is Not Existing 
In The Reference Key Column Of The Parent (Master) Table
Rule2:
We Cannot Update The Reference Key Value Of A Parent Table If That The Value Has A Corresponding 
Child Record In The Child Table Without Addressing What To Do With The Child Records
Example,
UPDATE Department SET Id = 100 WHERE Id = 10;
Rule3:
We Cannot Delete A Record From The Parent Table Provided That The Records Reference Key Value 
Has A Child Record In The Child Table Without Addressing What To Do With The Child Record. 
Example,
DELETE FROM Department WHERE Id = 10;
ALTER TABLE Employee1 ADD FOREIGN KEY (DepartmentId) REFERENCES Department(Id);
*******************************Delete Rules In Oracle **********************************************
Drop Table Employee;
Commit;
ON DELETE CASCADE: Whenever we are deleting a record from the parent table then
that associated child records are deleted from the child table automatically.
Create Table Employee(
  Id number PRIMARY KEY,
  Name Varchar2(20) Not Null,
  DepartmentID number REFERENCES Department(Id) On Delete Cascade 
);
commit;
Select * From Department;
select  * from employee;
desc employee;
Insert Into Employee Values (102, 'Hegade', 20);
INSERT into Employee VALUES (103, 'Vandy', 30);
Delete From Department Where Id = 20;
select * from department;
Select * From Employee;
Next With On Delete Set Null
ON DELETE SET NULL: Whenever we are deleting a record from the parent table then that associated child records are set to null in the child table automatically.
Drop Table Employee purge;
Create Table Employee(
  Id number PRIMARY KEY,
  Name Varchar2(20) Not Null,
  Departmentid Number References Department(Id) On Delete set null
);
Insert Into Department (Id, Name, Location) Values (40, 'IT', 'Hyderabad');
Insert Into Department (Id, Name, Location) Values (50, 'HR', 'Delhi');
Insert Into Department (Id, Name, Location) Values (60, 'Finance', 'Mumbai');
Insert Into Employee Values (1011, 'Jagdish', 40);
Insert Into Employee Values (1012, 'Hegade', 50);
Insert Into Employee Values (1013, 'Vandy', 60);
Select * From Department;
Select * From Employee
Delete From Department Where Id = 40;


*****************************FLASHBACK*************************************************
FLASHBACK TABLE <Table-Name> TO TIMESTAMP (SYSTIMESTAMP - INTERVAL '1' YEAR);
FLASHBACK TABLE <TABLE-NAME> TO BEFORE DROP;
FLASHBACK TABLE <TABLE-NAME> TO BEFORE DROP RENAME TO <NEW-TABLE-NAME>
// for flashback to work enable ROW Movement 
ALTER TABLE <TABLE-NAME> ENABLE ROW MOVEMENT;




//************************************************************ JOIN**************************

-- select * from pokemon_ability_data limit 5;

-- select * from pokemongo_basedata limit 5

-- select count(pokemonid), pokemonid from pokemongo_basedata group by pokemonid order by count(pokemonid) desc

-- select pokemon form pokemon_ability_data count(pokemonid), pokemonid from pokemongo_basedata group by pokemonid order by count(pokemonid) desc where pokemon_ability_data.pokemon 

select a.pokemonid,pokemon,dodo from(
select pokemonid,count(pokemonid) as dodo from pokemongo_basedata
group by 1 
order by dodo desc
limit 1
 )a
 inner join pokemon_ability_data b
 on a.pokemonid =b.pokemonid
 
//*****************************
--  select 
--  count(case when urban ='TRUE' then urban end)*100/count(*) as urban_cont,
--  count(case when suburban ='TRUE' then urban end)*100/count(*) as Suburban_cont, 
--  count(case when midurban ='TRUE' then urban end)*100/count(*) as midurban_cont,
--  count(case when rural ='TRUE' then urban end)*100/count(*) as rural_cont
--  from pokemongo_basedata 
