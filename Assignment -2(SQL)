

--PART -2
--a)


SELECT COUNT(A.customer_id) FROM
(SELECT customer_id,SUM(transaction_number)
FROM order_level 
GROUP BY 1 
HAVING SUM(transaction_number)>5) AS A;


--b)
--maximum orders

SELECT a.cohort,COUNT(DISTINCT a.order_id) FROM 
(SELECT o.order_id, o.customer_id, s.store_id ,s.cohort
FROM order_level AS o INNER JOIN store_level AS s 
ON o.store_id=s.store_id)  AS a
GROUP BY 1
ORDER BY 2 DESC;

--maximum customer
SELECT a.cohort,COUNT(DISTINCT a.customer_id) FROM 
(SELECT o.order_id, o.customer_id, s.store_id ,s.cohort
FROM order_level AS o INNER JOIN store_level AS s 
ON o.store_id=s.store_id)  AS a
GROUP BY 1
ORDER BY 2 DESC;


-- c) Market with highest average order value


SELECT a.market,AVG(b.avg_amount) AS avg_amount FROM store_level AS a
INNER JOIN
(SELECT store_id,AVG(basket_amount) AS avg_amount
FROM order_level 
GROUP BY 1
) AS b
ON a.store_id=b.store_id
GROUP BY 1
ORDER BY 2 DESC
;



--d) Cohort with highest number of orders


SELECT cohort,COUNT(order_id)
FROM store_level AS a
RIGHT JOIN 
order_level AS b
ON a.store_id=b.store_id
GROUP BY 1
ORDER BY 2 DESC ;


-- e) Number of stores which have started in last 8 weeks


SELECT COUNT(a.store_id) FROM 
(SELECT store_id,MIN(transaction_week) AS week FROM base_left
GROUP BY 1) AS a
WHERE 52-MOD(a.week,100)<8
;


-- f) Total number of customers by transaction Week


SELECT MOD(transaction_week,100) AS transaction_week, COUNT(DISTINCT customer_id) AS num_customers
FROM base_left
GROUP BY 1;


-- PART -3

-- a) What is churn rate for our business (churn is inactivity of 6 weeks(180) of a customer)

-- 63%

WITH cte_churn AS(
SELECT 
customer_id,transaction_week,
LAG(transaction_week,1,0) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS prev_order_week,
transaction_week- LAG(transaction_week,1,transaction_week) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS order_gap
FROM order_level
    )

SELECT (COUNT(*)*100)/180 FROM
(
SELECT customer_id,ROUND(AVG(order_gap)) AS avg_order_gap FROM cte_churn  
GROUP BY 1
    ) AS x WHERE x.avg_order_gap>5;



--b) Store which acquired highest number of customers from week 201644 to 201648 (Customers who made their first transaction in that store)


SELECT store_id ,COUNT(DISTINCT customer_id) AS new_customer
FROM base_left  
WHERE transaction_number=1
AND transaction_week BETWEEN 201644 AND 201648
GROUP BY 1
ORDER BY 2 DESC;


-- c) Average order gap for every week (Order Gap at transaction level =  (Current order week - Previous order week) for same customer




WITH cte_churn AS(
SELECT 
customer_id,transaction_week,
LAG(transaction_week,1,0) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS prev_order_week,
transaction_week- LAG(transaction_week,1,transaction_week) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS order_gap
FROM order_level
    )

SELECT transaction_week, ROUND(AVG(order_gap)) AS avg_order_gap FROM cte_churn 
GROUP BY 1;



-- d)Number of orders per week 


SELECT transaction_week,COUNT(DISTINCT order_id) FROM base_left
GROUP BY 1;




-- e) Identify Customers who transact within 7 days in Huntsville & Baltimore on an average

WITH cte_churn AS(
SELECT 
customer_id,transaction_week,store_id,
LAG(transaction_week,1,0) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS prev_order_week,
transaction_week- LAG(transaction_week,1,transaction_week) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS order_gap
FROM order_level
    )
    
 SELECT DISTINCT a.customer_id,b.market,a.order_gap FROM
 cte_churn AS a JOIN store_level AS b
 ON a.store_id=b.store_id
 WHERE a.order_gap<=1
 AND b.market IN ('Huntsville','Baltimore');



-- PART -4


-- Identify the closed stores for all weeks


SELECT x.store_id FROM 
(
SELECT a.store_id,b.transaction_week 
FROM store_level AS a 
LEFT JOIN
order_level AS b
ON a.store_id=b.store_id
) AS x
WHERE x.transaction_week IS NULL;



-- Identify Customer with most txn in each market


SELECT market ,customer_id,SUM(transaction_number) AS net_transaction
FROM base_left 
GROUP BY 1,2
ORDER BY 1,3 DESC;


-- Identify Customer with most sales in each market


SELECT market ,customer_id,SUM(basket_amount) AS net_sale
FROM base_left 
GROUP BY 1,2
ORDER BY 1,3 DESC;

--------------------------------------------------

-- Market with highest and lowest churn rate



 WITH cte_churn AS(
SELECT 
customer_id,transaction_week,store_id,
LAG(transaction_week,1,0) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS prev_order_week,
transaction_week- LAG(transaction_week,1,transaction_week) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS order_gap
FROM order_level
    )
    
 SELECT DISTINCT b.market,MAX(a.order_gap),MIN(a.order_gap) FROM
 cte_churn AS a JOIN store_level AS b
 ON a.store_id=b.store_id
 GROUP BY 1
 ORDER BY 2 DESC,3
;  



-- Identify the week when store started operation (store starts operation when it receives at least 5 orders in any given week)


SELECT x.store_id,x.transaction_week FROM 
(
SELECT store_id,transaction_week ,COUNT(order_id),
RANK() OVER(PARTITION BY store_id ORDER BY transaction_week) AS rnk
FROM order_level
GROUP BY 1,2
HAVING COUNT(order_id)>=5
ORDER BY 1,2
) AS x
WHERE x.rnk=1;



-- Identify #Active Customers trend by week (Active customers - Customers who transacted in last 6 weeks)

-- Identify Activity Rate by Week (Activity rate - Of all active customers how many transacted this week) 


 WITH cte_churn AS(
SELECT 
customer_id,transaction_week,store_id,
LAG(transaction_week,1,0) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS prev_order_week,
transaction_week- LAG(transaction_week,1,transaction_week) OVER(PARTITION BY customer_id ORDER BY transaction_week) AS order_gap
FROM order_level
    )
    SELECT transaction_week, COUNT(order_gap) AS active_customer
    FROM cte_churn WHERE order_gap<7
    GROUP BY 1
    ORDER BY 1;




-- List all the stores for which number of sales have never decreased week over week


 
 SELECT z.store_id FROM
 (
 SELECT y.store_id,y.diff,
 DENSE_RANK() OVER(PARTITION BY y.store_id ORDER BY y.diff) AS rnk
 FROM
 (
 SELECT x.store_id,x.transaction_week ,x.sale,
  LAG(x.sale,1,0) OVER(PARTITION BY x.store_id ORDER BY x.transaction_week) AS prev_order,
  sale-LAG(x.sale,1,0) OVER(PARTITION BY x.store_id ORDER BY x.transaction_week) AS diff
 FROM(
 SELECT store_id,transaction_week, COUNT(order_id) AS sale 
 FROM order_level
 GROUP BY 1,2
 ORDER BY 1,2
 ) AS x
     ) AS y
     ) AS z
     WHERE 
     z.diff>0 AND z.rnk=1;

